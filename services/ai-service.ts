// This is a placeholder service for AI message generation
// In a real app, you would integrate with OpenAI API or another AI service

export interface AIMessage {
  content: string
  timestamp: Date
  type: "text" | "voice"
  audioUrl?: string
}

// Sample responses for different message types
const GREETINGS = [
  "Hello! I'm Sonix, your AI assistant. How can I help you today?",
  "Hey there! I'm Sonix. What can I do for you?",
  "Hi! I'm Sonix, ready to assist with anything you need.",
]

const QUESTIONS = [
  "That's an interesting question. Let me think about that...",
  "I'd be happy to help with that question.",
  "Great question! Here's what I know:",
]

const GENERAL_RESPONSES = [
  "I understand. Let me help you with that.",
  "I see what you're saying. Here's my thought:",
  "That's interesting! Here's my perspective:",
  "Thanks for sharing. Here's what I think:",
]

const TECH_RESPONSES = [
  "From a technical perspective, I'd suggest looking into...",
  "When it comes to tech, there are several approaches you could take...",
  "That's a fascinating tech question. Here's what I know:",
]

const VOICE_RESPONSES = [
  "I've listened to your voice message. Here's my response:",
  "Thanks for the voice message. Let me respond to that:",
  "I heard your message clearly. Here's what I think:",
]

const FOLLOW_UPS = [
  "Is there anything else you'd like to know?",
  "Does that help? Let me know if you need more information.",
  "Feel free to ask if you have any follow-up questions!",
]

// Sample voice responses (URLs to pre-recorded audio files)
// In a real app, these would be generated by a text-to-speech service
const VOICE_RESPONSE_URLS = ["/placeholder-audio-1.mp3", "/placeholder-audio-2.mp3", "/placeholder-audio-3.mp3"]

// Detect message type to generate appropriate response
function detectMessageType(message: string): "greeting" | "question" | "tech" | "general" | "voice" {
  // If it's a voice message (no text content)
  if (message === "[Voice Message]") {
    return "voice"
  }

  const lowerMessage = message.toLowerCase()

  if (lowerMessage.includes("hello") || lowerMessage.includes("hi") || lowerMessage.includes("hey")) {
    return "greeting"
  }

  if (lowerMessage.includes("?")) {
    return "question"
  }

  if (
    lowerMessage.includes("code") ||
    lowerMessage.includes("programming") ||
    lowerMessage.includes("javascript") ||
    lowerMessage.includes("python") ||
    lowerMessage.includes("react") ||
    lowerMessage.includes("tech") ||
    lowerMessage.includes("ai") ||
    lowerMessage.includes("algorithm")
  ) {
    return "tech"
  }

  return "general"
}

// Generate a random response based on message type
function getRandomResponse(type: "greeting" | "question" | "tech" | "general" | "voice"): string {
  let responses: string[] = []

  switch (type) {
    case "greeting":
      responses = GREETINGS
      break
    case "question":
      responses = QUESTIONS
      break
    case "tech":
      responses = TECH_RESPONSES
      break
    case "voice":
      responses = VOICE_RESPONSES
      break
    case "general":
      responses = GENERAL_RESPONSES
      break
  }

  const randomIndex = Math.floor(Math.random() * responses.length)
  const followUpIndex = Math.floor(Math.random() * FOLLOW_UPS.length)

  // For non-greetings, add some content and a follow-up
  if (type !== "greeting") {
    return `${responses[randomIndex]} Based on my knowledge, I can provide insights on this topic. ${FOLLOW_UPS[followUpIndex]}`
  }

  return responses[randomIndex]
}

// Get a random voice response URL
function getRandomVoiceResponseUrl(): string {
  const randomIndex = Math.floor(Math.random() * VOICE_RESPONSE_URLS.length)
  return VOICE_RESPONSE_URLS[randomIndex]
}

// Simulate AI thinking and response generation
export async function generateAIResponse(message: string, isVoiceMessage = false): Promise<AIMessage> {
  // Simulate network delay (1-3 seconds)
  const delay = 1000 + Math.random() * 2000
  await new Promise((resolve) => setTimeout(resolve, delay))

  const messageType = isVoiceMessage ? "voice" : detectMessageType(message)
  const responseContent = getRandomResponse(messageType)

  // For voice messages, randomly decide if AI should respond with voice too (50% chance)
  const shouldRespondWithVoice = isVoiceMessage && Math.random() > 0.5

  if (shouldRespondWithVoice) {
    return {
      content: responseContent,
      timestamp: new Date(),
      type: "voice",
      audioUrl: getRandomVoiceResponseUrl(),
    }
  }

  return {
    content: responseContent,
    timestamp: new Date(),
    type: "text",
  }
}
